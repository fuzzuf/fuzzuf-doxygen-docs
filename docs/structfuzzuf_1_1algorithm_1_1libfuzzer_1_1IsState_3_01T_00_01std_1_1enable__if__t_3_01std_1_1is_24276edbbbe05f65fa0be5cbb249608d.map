<map id="fuzzuf::algorithm::libfuzzer::IsState&lt; T, std::enable_if_t&lt; std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().create_info)&gt;, FuzzerCreateInfo &gt; &amp;&amp;is_std_distribution_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().corpus_distribution)&gt; &gt; &amp;&amp;std::is_convertible_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().distribution_needs_update)&gt;, bool &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().rare_features)&gt; &gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;() .freq_of_most_abundant_rare_feature)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().global_feature_freqs)&gt; &gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().executed_mutations_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().added_features_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().updated_features_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().input_sizes_per_feature)&gt; &gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().smallest_element_per_feature)&gt; &gt; &gt; &gt; &gt;" name="fuzzuf::algorithm::libfuzzer::IsState&lt; T, std::enable_if_t&lt; std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().create_info)&gt;, FuzzerCreateInfo &gt; &amp;&amp;is_std_distribution_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().corpus_distribution)&gt; &gt; &amp;&amp;std::is_convertible_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().distribution_needs_update)&gt;, bool &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().rare_features)&gt; &gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;() .freq_of_most_abundant_rare_feature)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().global_feature_freqs)&gt; &gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().executed_mutations_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().added_features_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().updated_features_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().input_sizes_per_feature)&gt; &gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().smallest_element_per_feature)&gt; &gt; &gt; &gt; &gt;">
<area shape="rect" id="node1" title=" " alt="" coords="5,80,608,517"/>
<area shape="rect" id="node2" title=" " alt="" coords="265,5,349,32"/>
</map>
