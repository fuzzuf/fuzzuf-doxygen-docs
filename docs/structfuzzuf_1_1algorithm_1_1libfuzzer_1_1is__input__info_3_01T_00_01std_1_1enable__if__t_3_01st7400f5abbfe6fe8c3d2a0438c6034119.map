<map id="fuzzuf::algorithm::libfuzzer::is_input_info&lt; T, std::enable_if_t&lt; std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().id)&gt;, testcase_id_t &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().enabled)&gt;, bool &gt; &amp;&amp;std::is_void_v&lt; utils::void_t&lt; decltype(std::chrono::duration_cast&lt; std::chrono::microseconds &gt;(std::declval&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().time_of_unit)&gt;&gt;()))&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().features_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().executed_mutations_count)&gt; &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().never_reduce)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().may_delete_file)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().has_focus_function)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().reduced)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().needs_energy_update)&gt;, bool &gt; &amp;&amp;std::is_floating_point_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().energy)&gt; &gt; &amp;&amp;std::is_floating_point_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().sum_incidence)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().unique_feature_set)&gt; &gt; &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().status)&gt;, feedback::PUTExitReasonType &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().signal)&gt; &gt; &amp;&amp;std::is_floating_point_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().weight)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().found_unique_features)&gt; &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().added_to_corpus)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().sha1)&gt;, std::string &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().input_size)&gt; &gt; &amp;&amp;std::is_void_v&lt; utils::void_t&lt; decltype(std::declval&lt; T &amp; &gt;().updateEnergy(std::declval&lt; std::size_t &gt;(), std::declval&lt; bool &gt;(), std::declval&lt; std::chrono::microseconds &gt;()))&gt; &gt; &amp;&amp;std::is_same_v&lt; decltype(std::declval&lt; T &amp; &gt;().delete_feature_freq(std::declval&lt; std::uint32_t &gt;())), bool &gt; &amp;&amp;std::is_void_v&lt; utils::void_t&lt; decltype(std::declval&lt; T &amp; &gt;().updateFeatureFrequency(std::declval&lt; std::uint32_t &gt;()))&gt; &gt; &amp;&amp;std::is_convertible_v&lt; T, bool &gt; &gt; &gt;" name="fuzzuf::algorithm::libfuzzer::is_input_info&lt; T, std::enable_if_t&lt; std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().id)&gt;, testcase_id_t &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().enabled)&gt;, bool &gt; &amp;&amp;std::is_void_v&lt; utils::void_t&lt; decltype(std::chrono::duration_cast&lt; std::chrono::microseconds &gt;(std::declval&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().time_of_unit)&gt;&gt;()))&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().features_count)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().executed_mutations_count)&gt; &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().never_reduce)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().may_delete_file)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().has_focus_function)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().reduced)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().needs_energy_update)&gt;, bool &gt; &amp;&amp;std::is_floating_point_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().energy)&gt; &gt; &amp;&amp;std::is_floating_point_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().sum_incidence)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::range::RangeValueT&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().unique_feature_set)&gt; &gt; &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().status)&gt;, feedback::PUTExitReasonType &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().signal)&gt; &gt; &amp;&amp;std::is_floating_point_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().weight)&gt; &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().found_unique_features)&gt; &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().added_to_corpus)&gt;, bool &gt; &amp;&amp;std::is_same_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().sha1)&gt;, std::string &gt; &amp;&amp;std::is_integral_v&lt; utils::type_traits::RemoveCvrT&lt; decltype(std::declval&lt; T &amp; &gt;().input_size)&gt; &gt; &amp;&amp;std::is_void_v&lt; utils::void_t&lt; decltype(std::declval&lt; T &amp; &gt;().updateEnergy(std::declval&lt; std::size_t &gt;(), std::declval&lt; bool &gt;(), std::declval&lt; std::chrono::microseconds &gt;()))&gt; &gt; &amp;&amp;std::is_same_v&lt; decltype(std::declval&lt; T &amp; &gt;().delete_feature_freq(std::declval&lt; std::uint32_t &gt;())), bool &gt; &amp;&amp;std::is_void_v&lt; utils::void_t&lt; decltype(std::declval&lt; T &amp; &gt;().updateFeatureFrequency(std::declval&lt; std::uint32_t &gt;()))&gt; &gt; &amp;&amp;std::is_convertible_v&lt; T, bool &gt; &gt; &gt;">
<area shape="rect" id="node1" title=" " alt="" coords="5,80,756,781"/>
<area shape="rect" id="node2" title=" " alt="" coords="339,5,423,32"/>
</map>
